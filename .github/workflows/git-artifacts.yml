name: git-artifacts

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REPOSITORY: git-for-windows/git
  REF: main

  GIT_CONFIG_PARAMETERS: "'checkout.workers=56'"
  HOME: "${{github.workspace}}\\home"
  USERPROFILE: "${{github.workspace}}\\home"
  ARCHITECTURE: aarch64
  MSYSTEM: CLANGARM64
  MINGW_PREFIX: clangarm64
  MINGW_PACKAGE_PREFIX: mingw-w64-clang-aarch64
  SDK_REPO_ARCH: arm64

jobs:
  build:
    if: github.repository_owner == 'git-for-windows'
    runs-on: windows-11-arm
    steps:
      - name: Configure user
        shell: bash
        run:
          USER_NAME="${{github.actor}}" &&
          USER_EMAIL="${{github.actor}}@users.noreply.github.com" &&
          mkdir "$HOME" &&
          git config --global user.name "$USER_NAME" &&
          git config --global user.email "$USER_EMAIL" &&
          echo "PACKAGER=$USER_NAME <$USER_EMAIL>" >>$GITHUB_ENV

      - name: clone git-sdk-${{env.SDK_REPO_ARCH}}
        shell: bash
        run: |
          # cannot use `git clone` directly, to allow for PR's refs to be fetched
          git init --bare -b ${REF#refs/heads/} git-sdk-${{env.SDK_REPO_ARCH}}.git &&
          git -C git-sdk-${{env.SDK_REPO_ARCH}}.git remote add origin https://github.com/${{github.repository}} &&
          git -C git-sdk-${{env.SDK_REPO_ARCH}}.git config remote.origin.promisor true &&
          git -C git-sdk-${{env.SDK_REPO_ARCH}}.git config remote.origin.partialCloneFilter blob:none &&
          git -C git-sdk-${{env.SDK_REPO_ARCH}}.git fetch --depth=1 origin $REF:refs/heads/${REF#refs/heads/}
        env:
          REF: ${{github.ref}}
      - name: clone build-extra
        shell: bash
        run: git clone --depth=1 --single-branch -b main https://github.com/git-for-windows/build-extra
      - name: create build-installers artifact
        shell: bash
        run: |
          sh -x ./build-extra/please.sh create-sdk-artifact --sdk=git-sdk-${{env.SDK_REPO_ARCH}}.git build-installers &&

          cygpath -aw "$PWD/build-installers/usr/bin/core_perl" >>$GITHUB_PATH &&
          cygpath -aw "$PWD/build-installers/usr/bin" >>$GITHUB_PATH &&
          cygpath -aw "$PWD/build-installers/${{env.MINGW_PREFIX}}/bin" >>$GITHUB_PATH &&

          mkdir -p build-installers/usr/src &&
          mv build-extra build-installers/usr/src/
      - uses: actions/setup-node@v4
        # needed to run `add-release-note.js` (via `./please.sh mention feature`)
        with:
          node-version: 22.x
      - name: Generate bundle artifacts
        shell: bash
        run: |
          printf '#!/bin/sh\n\nexec /${{env.MINGW_PREFIX}}/bin/git.exe "$@"\n' >/usr/bin/git &&
          mkdir -p bundle-artifacts &&

          { test -n "$REPOSITORY" || REPOSITORY='${{github.repository}}'; } &&
          { test -n "$REF" || REF='${{github.ref}}'; } &&
          git -c init.defaultBranch=main init --bare &&
          git remote add -f origin https://github.com/git-for-windows/git &&
          git fetch "https://github.com/$REPOSITORY" "$REF:$REF" &&

          tag_name="$(git describe --match 'v[0-9]*' FETCH_HEAD)-$(date +%Y%m%d%H%M%S)" &&
          echo "prerelease-${tag_name#v}" >bundle-artifacts/ver &&
          echo "${tag_name#v}" >bundle-artifacts/display_version &&
          echo "$tag_name" >bundle-artifacts/next_version &&
          git tag -m "Snapshot build" "$tag_name" FETCH_HEAD &&
          git bundle create bundle-artifacts/git.bundle origin/main.."$tag_name" &&

          sh -x /usr/src/build-extra/please.sh mention feature "Snapshot of $(git show -s  --pretty='tformat:%h (%s, %ad)' --date=short FETCH_HEAD)" &&
          git -C /usr/src/build-extra bundle create "$PWD/bundle-artifacts/build-extra.bundle" origin/main..main
      - name: 'Publish bundle-artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: bundle-artifacts
          path: bundle-artifacts
          retention-days: 5

      - name: Check out git/git
        shell: bash
        run: |
          git -c init.defaultBranch=main init &&
          git remote add -f origin https://github.com/git-for-windows/git &&
          git fetch --tags bundle-artifacts/git.bundle $(cat bundle-artifacts/next_version) &&
          git reset --hard $(cat bundle-artifacts/next_version)
      - name: Build ${{env.MINGW_PACKAGE_PREFIX}}-git
        shell: bash
        run: |
          set -x

          # Make sure that there is a `/usr/bin/git` that can be used by `makepkg-mingw`
          printf '#!/bin/sh\n\nexec /${{env.MINGW_PREFIX}}/bin/git.exe "$@"\n' >/usr/bin/git &&

          # Restrict `PATH` to MSYS2
          PATH="/${{env.MINGW_PREFIX}}/bin:/usr/bin:/C/Windows/system32"

          sh -x /usr/src/build-extra/please.sh build-mingw-w64-git --only-$ARCHITECTURE --build-src-pkg -o artifacts HEAD &&
          cp bundle-artifacts/ver artifacts/ &&

          b=$PWD/artifacts &&
          version=$(cat bundle-artifacts/next_version) &&
          (cd /usr/src/MINGW-packages/mingw-w64-git &&
          cp PKGBUILD.$version PKGBUILD &&
          git commit -s -m "mingw-w64-git: new version ($version)" PKGBUILD &&
          git bundle create "$b"/MINGW-packages.bundle origin/main..main)
      - name: Publish ${{env.MINGW_PACKAGE_PREFIX}}-git
        uses: actions/upload-artifact@v4
        with:
          name: pkg-${{env.ARCHITECTURE}}
          path: artifacts
          retention-days: 5

      - name: prepare build-installers for uploading
        shell: bash
        run: |
          tar czf build-installers.tgz build-installers/
      - name: Publish build-installers.tgz
        uses: actions/upload-artifact@v4
        with:
          name: build-installers.tgz
          path: build-installers.tgz
          retention-days: 1

  artifacts:
    runs-on: windows-11-arm
    needs: [build]
    strategy:
      matrix:
        artifact: [installer, portable, mingit]
      fail-fast: false
    steps:
      - name: Download pkg-${{env.ARCHITECTURE}}
        uses: actions/download-artifact@v5
        with:
          name: pkg-${{env.ARCHITECTURE}}
          path: pkg-${{env.ARCHITECTURE}}
      - name: Download bundle-artifacts
        uses: actions/download-artifact@v5
        with:
          name: bundle-artifacts
          path: bundle-artifacts
      - name: Download build-installers.tgz
        uses: actions/download-artifact@v5
        with:
          name: build-installers.tgz
      - name: Configure Git for Windows SDK
        shell: bash
        run: |
          tar xf build-installers.tgz &&
          cygpath -aw "$PWD/build-installers/usr/bin/core_perl" >>$GITHUB_PATH &&
          cygpath -aw "$PWD/build-installers/usr/bin" >>$GITHUB_PATH &&
          cygpath -aw "$PWD/build-installers/${{env.MINGW_PREFIX}}/bin" >>$GITHUB_PATH
      - name: Build ${{env.ARCHITECTURE}} ${{matrix.artifact}}
        shell: bash
        run: |
          sh -x /usr/src/build-extra/please.sh make_installers_from_mingw_w64_git \
            --version=$(cat pkg-${{env.ARCHITECTURE}}/ver) \
            -o artifacts \
            --${{matrix.artifact}} \
            --pkg=pkg-${{env.ARCHITECTURE}}/${{env.MINGW_PACKAGE_PREFIX}}-git-[0-9]*.tar.xz \
            --pkg=pkg-${{env.ARCHITECTURE}}/${{env.MINGW_PACKAGE_PREFIX}}-git-doc-html-[0-9]*.tar.xz
      - name: Copy package-versions and pdbs
        if: matrix.artifact == 'installer'
        shell: bash
        run: |
          cp /usr/src/build-extra/installer/package-versions.txt artifacts/ &&

          a=$PWD/artifacts &&
          p=$PWD/pkg-${{env.ARCHITECTURE}} &&
          (cd /usr/src/build-extra &&
          mkdir -p cached-source-packages &&
          cp "$p"/*-pdb* cached-source-packages/ &&
          GIT_CONFIG_PARAMETERS="'windows.sdk${{env.SDK_REPO_ARCH}}.path='" ./please.sh bundle_pdbs --arch=${{env.ARCHITECTURE}} --directory="$a" installer/package-versions.txt)
      - name: Publish ${{matrix.artifact}}-${{env.ARCHITECTURE}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.artifact}}-${{env.ARCHITECTURE}}
          path: artifacts
          retention-days: 5

      - name: Run the installer
        if: matrix.artifact == 'installer'
        shell: pwsh
        run: |
          $exePath = Get-ChildItem -Path artifacts/*.exe | %{$_.FullName}
          $installer = Start-Process -PassThru -Wait -FilePath "$exePath" -ArgumentList "/SILENT /VERYSILENT /NORESTART /SUPPRESSMSGBOXES /ALLOWDOWNGRADE=1 /LOG=installer.log"
          $exitCode = $installer.ExitCode
          if ($exitCode -ne 0) {
            Write-Host "::error::Installer failed with exit code $exitCode!"
            exit 1
          }
          "$env:ProgramFiles\Git\usr\bin" | Out-File -Encoding ascii -Append $env:GITHUB_PATH
          "$env:ProgramFiles\Git\${{env.MINGW_PREFIX}}\bin" | Out-File -Encoding ascii -Append $env:GITHUB_PATH
      - name: Publish installer log
        if: matrix.artifact == 'installer' && (failure() || success())
        uses: actions/upload-artifact@v4
        with:
          name: installer.log
          path: installer.log
          retention-days: 5
      - name: Validate
        if: matrix.artifact == 'installer'
        shell: bash
        run: |
          echo '::group::installer.log'
          cat installer.log
          echo '::endgroup'

          set -x &&
          grep 'Installation process succeeded' installer.log &&
          ! grep -iw failed installer.log &&
          cygpath -aw / &&
          git.exe version --build-options >version &&
          cat version &&
          grep "$(sed -e 's|^v||' -e 's|-|.|g' <bundle-artifacts/next_version)" version &&
          checklist=build-installers/usr/src/build-extra/installer/run-checklist.sh &&
          # cannot test SSH keys in read-only mode, skip test for now
          sed -i 's|git@ssh.dev.azure.com:v3/git-for-windows/git/git|https://github.com/git/git|' $checklist &&
          sh -x $checklist
